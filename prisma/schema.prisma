// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// model User {
//     id            String    @id @default(cuid())
//     name          String?
//     email         String?   @unique
//     emailVerified DateTime?
//     image         String?

//     stripeCustomerId         String?
//     stripeSubscriptionId     String?
//     stripeSubscriptionStatus StripeSubscriptionStatus?

//     hashtagSearches HashtagSearch[]
//     HashtagGroup    HashtagGroup[]
// }

model StripeSubscription {
    id                   String                   @id @default(cuid())
    userId               String                   @unique
    status               StripeSubscriptionStatus
    stripeCustomerId     String?
    stripeSubscriptionId String?
}

enum StripeSubscriptionStatus {
    incomplete
    incomplete_expired
    trialing
    active
    past_due
    canceled
    unpaid
    paused
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model HashtagSearch {
    id        String                   @id @default(cuid())
    createdAt DateTime                 @default(now())
    updatedAt DateTime                 @updatedAt
    name      String                   @db.VarChar(255)
    hashtags  HashtagSearchOnHashtag[]
    // user      User                     @relation(fields: [userId], references: [id])
    userId    String
    hidden    Boolean                  @default(false)

    @@index([userId])
}

model HashtagSearchOnHashtag {
    hashtag         Hashtag       @relation(fields: [hashtagId], references: [id])
    hashtagId       String
    hashtagSearch   HashtagSearch @relation(fields: [hashtagSearchId], references: [id])
    hashtagSearchId String
    assignedAt      DateTime      @default(now())

    @@id([hashtagId, hashtagSearchId])
    @@index([hashtagId])
    @@index([hashtagSearchId])
}

model Hashtag {
    id              String                   @id @default(cuid())
    createdAt       DateTime                 @default(now())
    updatedAt       DateTime                 @updatedAt
    name            String                   @unique @db.VarChar(255)
    hashtagGroups   HashtagOnHashtagGroups[]
    hashtagSearches HashtagSearchOnHashtag[]
}

model HashtagGroup {
    id        String                   @id @default(cuid())
    createdAt DateTime                 @default(now())
    updatedAt DateTime                 @updatedAt
    name      String                   @db.VarChar(255)
    hashtags  HashtagOnHashtagGroups[]
    // user      User                     @relation(fields: [userId], references: [id])
    userId    String

    @@index([userId])
}

model HashtagOnHashtagGroups {
    hashtag        Hashtag      @relation(fields: [hashtagId], references: [id])
    hashtagId      String
    hashtagGroup   HashtagGroup @relation(fields: [hashtagGroupId], references: [id])
    hashtagGroupId String
    assignedAt     DateTime     @default(now())

    @@id([hashtagId, hashtagGroupId])
    @@index([hashtagId])
    @@index([hashtagGroupId])
}

model StripeEvent {
    id               String   @id @unique
    api_version      String?
    data             Json
    request          Json?
    type             String
    object           String
    account          String?
    created          DateTime
    livemode         Boolean
    pending_webhooks Int
}
