// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    // @db.Text https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    isSubscribed     Boolean @default(false)
    stripeCustomerId String?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Hashtag {
    id            String                   @id @default(cuid())
    createdAt     DateTime                 @default(now())
    updatedAt     DateTime                 @updatedAt
    name          String                   @unique @db.VarChar(255)
    hashtagGroups HashtagOnHashtagGroups[]
}

model HashtagGroup {
    id        String                   @id @default(cuid())
    createdAt DateTime                 @default(now())
    updatedAt DateTime                 @updatedAt
    name      String                   @db.VarChar(255)
    hashtags  HashtagOnHashtagGroups[]
}

model HashtagOnHashtagGroups {
    hashtag        Hashtag      @relation(fields: [hashtagId], references: [id])
    hashtagId      String
    hashtagGroup   HashtagGroup @relation(fields: [hashtagGroupId], references: [id])
    hashtagGroupId String
    assignedAt     DateTime     @default(now())

    @@id([hashtagId, hashtagGroupId])
    @@index([hashtagId])
    @@index([hashtagGroupId])
}
